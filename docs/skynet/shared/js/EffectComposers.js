THREE.CopyShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:["varying vec2 vUv;","void main() {","vUv = uv;","gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","}"].join("\n"),fragmentShader:["uniform float opacity;","uniform sampler2D tDiffuse;","varying vec2 vUv;","void main() {","vec4 texel = texture2D( tDiffuse, vUv );","gl_FragColor = opacity * texel;","}"].join("\n")};THREE.EffectComposer=function(d,c){this.renderer=d;if(c===undefined){var b={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,stencilBuffer:false};var a=d.getDrawingBufferSize(new THREE.Vector2());c=new THREE.WebGLRenderTarget(a.width,a.height,b);c.texture.name="EffectComposer.rt1"}this.renderTarget1=c;this.renderTarget2=c.clone();this.renderTarget2.texture.name="EffectComposer.rt2";this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.renderToScreen=true;this.passes=[];if(THREE.CopyShader===undefined){console.error("THREE.EffectComposer relies on THREE.CopyShader")}if(THREE.ShaderPass===undefined){console.error("THREE.EffectComposer relies on THREE.ShaderPass")}this.copyPass=new THREE.ShaderPass(THREE.CopyShader);this._previousFrameTime=Date.now()};Object.assign(THREE.EffectComposer.prototype,{swapBuffers:function(){var a=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=a},addPass:function(b){this.passes.push(b);var a=this.renderer.getDrawingBufferSize(new THREE.Vector2());b.setSize(a.width,a.height)},insertPass:function(b,a){this.passes.splice(a,0,b)},isLastEnabledPass:function(b){for(var a=b+1;a<this.passes.length;a++){if(this.passes[a].enabled){return false}}return true},render:function(c){if(c===undefined){c=(Date.now()-this._previousFrameTime)*0.001}this._previousFrameTime=Date.now();var g=this.renderer.getRenderTarget();var a=false;var f,e,b=this.passes.length;for(e=0;e<b;e++){f=this.passes[e];if(f.enabled===false){continue}f.renderToScreen=(this.renderToScreen&&this.isLastEnabledPass(e));f.render(this.renderer,this.writeBuffer,this.readBuffer,c,a);if(f.needsSwap){if(a){var d=this.renderer.context;d.stencilFunc(d.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,c);d.stencilFunc(d.EQUAL,1,4294967295)}this.swapBuffers()}if(THREE.MaskPass!==undefined){if(f instanceof THREE.MaskPass){a=true}else{if(f instanceof THREE.ClearMaskPass){a=false}}}}this.renderer.setRenderTarget(g)},reset:function(b){if(b===undefined){var a=this.renderer.getDrawingBufferSize(new THREE.Vector2());b=this.renderTarget1.clone();b.setSize(a.width,a.height)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=b;this.renderTarget2=b.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(c,a){this.renderTarget1.setSize(c,a);this.renderTarget2.setSize(c,a);for(var b=0;b<this.passes.length;b++){this.passes[b].setSize(c,a)}}});THREE.Pass=function(){this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false};Object.assign(THREE.Pass.prototype,{setSize:function(b,a){},render:function(d,e,c,b,a){console.error("THREE.Pass: .render() must be implemented in derived pass.")}});THREE.Pass.FullScreenQuad=(function(){var a=new THREE.OrthographicCamera(-1,1,1,-1,0,1);var c=new THREE.PlaneBufferGeometry(2,2);var b=function(d){this._mesh=new THREE.Mesh(c,d)};Object.defineProperty(b.prototype,"material",{get:function(){return this._mesh.material},set:function(d){this._mesh.material=d}});Object.assign(b.prototype,{render:function(d){d.render(this._mesh,a)}});return b})();THREE.ShaderPass=function(a,b){THREE.Pass.call(this);this.textureID=(b!==undefined)?b:"tDiffuse";if(a instanceof THREE.ShaderMaterial){this.uniforms=a.uniforms;this.material=a}else{if(a){this.uniforms=THREE.UniformsUtils.clone(a.uniforms);this.material=new THREE.ShaderMaterial({defines:Object.assign({},a.defines),uniforms:this.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader})}}this.fsQuad=new THREE.Pass.FullScreenQuad(this.material)};THREE.ShaderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.ShaderPass,render:function(d,e,c,b,a){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=c.texture}this.fsQuad.material=this.material;if(this.renderToScreen){d.setRenderTarget(null);this.fsQuad.render(d)}else{d.setRenderTarget(e);if(this.clear){d.clear(d.autoClearColor,d.autoClearDepth,d.autoClearStencil)}this.fsQuad.render(d)}}});THREE.RenderPass=function(e,c,a,d,b){THREE.Pass.call(this);this.scene=e;this.camera=c;this.overrideMaterial=a;this.clearColor=d;this.clearAlpha=(b!==undefined)?b:0;this.clear=true;this.clearDepth=false;this.needsSwap=false};THREE.RenderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.RenderPass,render:function(f,g,e,c,b){var a=f.autoClear;f.autoClear=false;this.scene.overrideMaterial=this.overrideMaterial;var h,d;if(this.clearColor){h=f.getClearColor().getHex();d=f.getClearAlpha();f.setClearColor(this.clearColor,this.clearAlpha)}if(this.clearDepth){f.clearDepth()}f.setRenderTarget(this.renderToScreen?null:e);if(this.clear){f.clear(f.autoClearColor,f.autoClearDepth,f.autoClearStencil)}f.render(this.scene,this.camera);if(this.clearColor){f.setClearColor(h,d)}this.scene.overrideMaterial=null;f.autoClear=a}});THREE.MaskPass=function(b,a){THREE.Pass.call(this);this.scene=b;this.camera=a;this.clear=true;this.needsSwap=false;this.inverse=false};THREE.MaskPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.MaskPass,render:function(f,e,i,h,d){var b=f.context;var a=f.state;a.buffers.color.setMask(false);a.buffers.depth.setMask(false);a.buffers.color.setLocked(true);a.buffers.depth.setLocked(true);var g,c;if(this.inverse){g=0;c=1}else{g=1;c=0}a.buffers.stencil.setTest(true);a.buffers.stencil.setOp(b.REPLACE,b.REPLACE,b.REPLACE);a.buffers.stencil.setFunc(b.ALWAYS,g,4294967295);a.buffers.stencil.setClear(c);f.render(this.scene,this.camera,i,this.clear);f.render(this.scene,this.camera,e,this.clear);a.buffers.color.setLocked(false);a.buffers.depth.setLocked(false);a.buffers.stencil.setFunc(b.EQUAL,1,4294967295);a.buffers.stencil.setOp(b.KEEP,b.KEEP,b.KEEP)}});THREE.ClearMaskPass=function(){THREE.Pass.call(this);this.needsSwap=false};THREE.ClearMaskPass.prototype=Object.create(THREE.Pass.prototype);Object.assign(THREE.ClearMaskPass.prototype,{render:function(c,d,b,e,a){c.state.buffers.stencil.setTest(false)}});
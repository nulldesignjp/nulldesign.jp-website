/*	NDEaseConvert.js	2012.06.08		by nulldesign.jp*//*	@param e is 0 to 1;*/function NDEaseConvert(){}NDEaseConvert.prototype = {	PI	:	Math.PI,	hPI	:	Math.PI * .5,	linearPar	:	function( e )	{		return e;	},	easeInOutSinePar	:	function( e )	{		var _rad = - this.hPI + this.PI * e;		var _sin = ( Math.sin( _rad ) + 1 ) * .5;		return _sin;	},	easeInSinePar	:	function( e )	{		var _rad = - this.hPI + this.hPI * e;		var _sin = Math.sin( _rad ) + 1;		return _sin;	},	easeOutSinePar	:	function( e )	{		var _rad = this.hPI * e;		var _sin = Math.sin( _rad );		return _sin;	},	easeInOutDoublePar	:	function( e )	{		var _rad = - this.hPI + this.PI * e;		var _sin = ( Math.sin( _rad ) + 1 ) * .5;		return _sin*_sin;	},	easeInDoublePar	:	function( e )	{		var _rad = - this.hPI + this.hPI * e;		var _sin = Math.sin( _rad ) + 1;		return _sin*_sin;	},	easeOutDoublePar	:	function( e )	{		var _rad = this.hPI * e;		var _sin = Math.sin( _rad );		return _sin*_sin;	},	easeInOutCubicPar	:	function( e )	{		var _rad = - this.hPI + this.PI * e;		var _sin = ( Math.sin( _rad ) + 1 ) * .5;		return _sin*_sin*_sin;	},	easeInCubicPar	:	function( e )	{		var _rad = - this.hPI + this.hPI * e;		var _sin = Math.sin( _rad ) + 1;		return _sin*_sin*_sin;	},	easeOutCubicPar	:	function( e )	{		var _rad = this.hPI * e;		var _sin = Math.sin( _rad );		return _sin*_sin*_sin;	},	easeInOutQuadPar	:	function( e )	{		var _rad = - this.hPI + this.PI * e;		var _sin = ( Math.sin( _rad ) + 1 ) * .5;		return _sin*_sin*_sin*_sin;	},	easeInQuadPar	:	function( e )	{		var _rad = - this.hPI + this.hPI * e;		var _sin = Math.sin( _rad ) + 1;		return _sin*_sin*_sin*_sin;	},	easeOutQuadPar	:	function( e )	{		var _rad = this.hPI * e;		var _sin = Math.sin( _rad );		return _sin*_sin*_sin*_sin;	},	easeInOutQuintPar	:	function( e )	{		var _rad = - this.hPI + this.PI * e;		var _sin = ( Math.sin( _rad ) + 1 ) * .5;		return _sin*_sin*_sin*_sin*_sin;	},	easeInQuintPar	:	function( e )	{		var _rad = - this.hPI + this.hPI * e;		var _sin = Math.sin( _rad ) + 1;		return _sin*_sin*_sin*_sin*_sin;	},	easeOutQuintPar	:	function( e )	{		var _rad = this.hPI * e;		var _sin = Math.sin( _rad );		return _sin*_sin*_sin*_sin*_sin;	},	easeInOutExpoPar	:	function( e )	{		var _rad = - this.hPI + this.PI * e;		var _sin = ( Math.sin( _rad ) + 1 ) * .5;		return _sin*_sin*_sin*_sin*_sin*_sin;	},	easeInExpoPar	:	function( e )	{		var _rad = - this.hPI + this.hPI * e;		var _sin = Math.sin( _rad ) + 1;		return _sin*_sin*_sin*_sin*_sin*_sin;	},	easeOutExpoPar	:	function( e )	{		var _rad = this.hPI * e;		var _sin = Math.sin( _rad );		return _sin*_sin*_sin*_sin*_sin*_sin;	},	/*		TWEENER.AS	-	CLONE();			@param t		Current time (in frames or seconds).			@param b		Starting value.			@param c		Change needed in value.			@param d		Expected easing duration (in frames or seconds).			@return		The correct value.	*/	easeNone	:	function(t,b,c,d)	{		return c*t/d + b;	},	//	QUAD	easeInQuad	:	function(t,b,c,d)	{		return c*(t/=d)*t + b;	},	easeOutQuad	:	function(t,b,c,d)	{		return -c *(t/=d)*(t-2) + b;	},	easeInOutQuad	:	function(t,b,c,d)	{		if ((t/=d/2) < 1) return c/2*t*t + b;		return -c/2 * ((--t)*(t-2) - 1) + b;	},	easeOutInQuad	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutQuad (t*2, b, c/2, d);		return this.easeInQuad((t*2)-d, b+c/2, c/2, d);	},	//	CUBIC	easeInCubic	:	function(t,b,c,d)	{		return c*(t/=d)*t*t + b;	},	easeOutCubic	:	function(t,b,c,d)	{		return c*((t=t/d-1)*t*t + 1) + b;	},	easeInOutCubic	:	function(t,b,c,d)	{		if ((t/=d/2) < 1) return c/2*t*t*t + b;		return c/2*((t-=2)*t*t + 2) + b;	},	easeOutInCubic	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutCubic (t*2, b, c/2, d);		return this.easeInCubic((t*2)-d, b+c/2, c/2, d);	},	//	QUART	easeInQuart	:	function(t,b,c,d)	{		return c*(t/=d)*t*t*t + b;	},	easeOutQuart	:	function(t,b,c,d)	{		return -c * ((t=t/d-1)*t*t*t - 1) + b;	},	easeInOutQuart	:	function(t,b,c,d)	{		if ((t/=d/2) < 1) return c/2*t*t*t*t + b;		return -c/2 * ((t-=2)*t*t*t - 2) + b	},	easeOutInQuart	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutQuart (t*2, b, c/2, d);		return this.easeInQuart((t*2)-d, b+c/2, c/2, d);	},	//	QUINT	easeInQuint	:	function(t,b,c,d)	{		return c*(t/=d)*t*t*t*t + b;	},	easeOutQuint	:	function(t,b,c,d)	{		return c*((t=t/d-1)*t*t*t*t + 1) + b;	},	easeInOutQuint	:	function(t,b,c,d)	{		if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;		return c/2*((t-=2)*t*t*t*t + 2) + b;	},	easeOutInQuint	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutQuint (t*2, b, c/2, d);		return this.easeInQuint((t*2)-d, b+c/2, c/2, d);	},	//	SINE	easeInSine	:	function(t,b,c,d)	{		return -c * Math.cos(t/d * (Math.PI/2)) + c + b;	},	easeOutSine	:	function(t,b,c,d)	{		return c * Math.sin(t/d * (Math.PI/2)) + b;	},	easeInOutSine	:	function(t,b,c,d)	{		return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;	},	easeOutInSine	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutSine (t*2, b, c/2, d);		return this.easeInSine((t*2)-d, b+c/2, c/2, d);	},	//	EXPO	easeInExpo	:	function(t,b,c,d)	{		return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b - c * 0.001;	},	easeOutExpo	:	function(t,b,c,d)	{		return (t==d) ? b+c : c * 1.001 * (-Math.pow(2, -10 * t/d) + 1) + b;	},	easeInOutExpo	:	function(t,b,c,d)	{		if (t==0) return b;		if (t==d) return b+c;		if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b - c * 0.0005;		return c/2 * 1.0005 * (-Math.pow(2, -10 * --t) + 2) + b;	},	easeOutInExpo	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutExpo (t*2, b, c/2, d);		return this.easeInExpo((t*2)-d, b+c/2, c/2, d);	},	//	CIRC	easeInCirc	:	function(t,b,c,d)	{		return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;	},	easeOutCirc	:	function(t,b,c,d)	{		return c * Math.sqrt(1 - (t=t/d-1)*t) + b;	},	easeInOutCirc	:	function(t,b,c,d)	{		if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;		return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;	},	easeOutInCirc	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutCirc (t*2, b, c/2, d);		return this.easeInCirc((t*2)-d, b+c/2, c/2, d);	},	//	ELASTIC	easeInElastic	:	function(t,b,c,d)	{		if (t==0) return b;		if ((t/=d)==1) return b+c;		var p = d*.3;		var s;		var a = 0;		if (!Boolean(a) || a < Math.abs(c)) {			a = c;			s = p/4;		} else {			s = p/(2*Math.PI) * Math.asin (c/a);		}		return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;	},	easeOutElastic	:	function(t,b,c,d)	{		if (t==0) return b;		if ((t/=d)==1) return b+c;		var p = d*.3;		var s;		var a = 0;		if (!Boolean(a) || a < Math.abs(c)) {			a = c;			s = p/4;		} else {			s = p/(2*Math.PI) * Math.asin (c/a);		}		return (a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b);	},	easeInOutElastic	:	function(t,b,c,d)	{		if (t==0) return b;		if ((t/=d/2)==2) return b+c;		var p = d*(.3*1.5);		var s;		var a = 0;		if (!Boolean(a) || a < Math.abs(c)) {			a = c;			s = p/4;		} else {			s = p/(2*Math.PI) * Math.asin (c/a);		}		if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;		return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;	},	easeOutInElastic	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutElastic (t*2, b, c/2, d);		return this.easeInElastic((t*2)-d, b+c/2, c/2, d);	},	//	BACK	easeInBack	:	function(t,b,c,d)	{		var s = 1.70158;		return c*(t/=d)*t*((s+1)*t - s) + b;	},	easeOutBack	:	function(t,b,c,d)	{		var s = 1.70158;		return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;	},	easeInOutBack	:	function(t,b,c,d)	{		var s = 1.70158;		if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;		return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;	},	easeOutInBack	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutBack (t*2, b, c/2, d);		return this.easeInBack((t*2)-d, b+c/2, c/2, d);	},	//	BOUNCE	easeInBounce	:	function(t,b,c,d)	{		return c - this.easeOutBounce (d-t, 0, c, d) + b;	},	easeOutBounce	:	function(t,b,c,d)	{		if ((t/=d) < (1/2.75)) {			return c*(7.5625*t*t) + b;		} else if (t < (2/2.75)) {			return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;		} else if (t < (2.5/2.75)) {			return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;		} else {			return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;		}	},	easeInOutBounce	:	function(t,b,c,d)	{		if (t < d/2) return this.easeInBounce (t*2, 0, c, d) * .5 + b;		else return this.easeOutBounce (t*2-d, 0, c, d) * .5 + c*.5 + b;	},	easeOutInBounce	:	function(t,b,c,d)	{		if (t < d/2) return this.easeOutBounce (t*2, b, c/2, d);		return this.easeInBounce((t*2)-d, b+c/2, c/2, d);	}};